resources:
  - name: be_gitRepo
    type: GitRepo
    configuration:
      path: eranbl/SwampUp2021 # <-- PREREQ: Fork current github repository to your github organization and mention fullpath of your forked Repository
      gitProvider: GITHUB_INT
      files:
         # To ensure that only file changes in this sub-directoty triggers a run
        include: ^SUV-204-CI-CD-Deep-Dive\:JFrog-Pipelines/java-backend/.*$

  - name: appl_build_info_output
    type: BuildInfo
    configuration:
      sourceArtifactory: ARTFY_INT # <-- PREREQ: Create this Integration to your Artifactory Instance in Pipelines Admin 
      buildName: backend_build
      buildNumber: 1

  - name: appl_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: ARTFY_INT
      buildName: backend_build
      buildNumber: 1

  - name: appl_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: ARTFY_INT
      buildName: backend_build
      buildNumber: 1

  - name: fe_gitRepo
    type: GitRepo
    configuration:
      path: colathurv/SwampUp2021 # <-- PREREQ: Mention fullpath of your forked Repository
      gitProvider: GITHUB_INT # <-- PREREQ: Create this Integration to your GitHub Organization where your forked Repo is located
      # To ensure that only file changes in this sub-directoty triggers a run
      files:
        include: ^SUV-204-CI-CD-Deep-Dive\:JFrog-Pipelines/vue-frontend/.*$


pipelines:
  - name: swampup2021_app_pipeline
    steps:
      - name: bld_backend
        type: MvnBuild
        configuration:
          sourceLocation: SUV-204-CI-CD-Deep-Dive:JFrog-Pipelines/java-backend
          mvnCommand: clean install -ntp
          environmentVariables:
            JFROG_CLI_BUILD_NAME: backend-build
          resolverSnapshotRepo: libs-snapshot-virtual
          resolverReleaseRepo: libs-staging-virtual # <-- PREREQ: Create 3 maven repositories: libs-staging-local (type LOCAL), libs-staging-remote (type REMOTE) and libs-staging-virtual(type VIRTUAL). Have libs-staging-virtual aggregate the local and remote, in that order.  
          deployerSnapshotRepo: libs-snapshot-local
          deployerReleaseRepo: libs-staging-local
          inputResources:
            - name: be_gitRepo
          integrations:
            - name: ARTFY_INT
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
        execution:
          onStart:
            - javac -version
            - mvn --version

      - name: bld_frontend
        type: NpmBuild
        configuration:
          npmArgs: --no-progress --no-audit
          environmentVariables: 
            JFROG_CLI_BUILD_NAME: frontend-build
          sourceLocation: SUV-204-CI-CD-Deep-Dive:JFrog-Pipelines/vue-frontend
          repositoryName: npm-staging-virtual # <-- PREREQ: Create 3 npm repositories: npm-staging-local (type LOCAL), npm-staging-remote (type REMOTE) and npm-staging-virtual (type VIRTUAL). Have npm-staging-virtual aggregate the local and remote, in that order.  
          inputResources:
            - name: fe_gitRepo
          integrations:
            - name: ARTFY_INT

      - name: pack_frontend
        type: Bash
        configuration:
          inputSteps:
            - name: bld_frontend
          integrations:
            - name: ARTFY_INT
        execution:
          onStart:
            - export tempStateLocation="$step_tmp_dir/npmSourceState"
            - restore_run_files npmBuildInputGitRepo $tempStateLocation
            - pushd $tempStateLocation/SUV-204-CI-CD-Deep-Dive:JFrog-Pipelines/vue-frontend
            - echo $PATH
            - pwd
            - ls -l
            - ls -l ./node_modules/@vue
            - ls -l ./node_modules/.bin
            - find . -name 'vue-cli-service' -print
            - echo $tempStateLocation/SUV-204-CI-CD-Deep-Dive:JFrog-Pipelines/vue-frontend
             #As opposed to npm run build, we are invoking the vue-cli-service directly
            - ./node_modules/.bin/vue-cli-service build
            - add_run_files $tempStateLocation/. npmBuildInputGitRepo

      - name: publish_frontend
        type: NpmPublish
        configuration:
          repositoryName: npm-staging-virtual
          inputSteps:
            - name: pack_frontend
          integrations:
            - name: ARTFY_INT
        execution:
          onStart:
            - export inputNpmBuildStepName="bld_frontend"

      - name: build_app
        type: Bash
        configuration:
          environmentVariables:
            dockerImageName: eranb-docker-staging-local.jfrog.io/docker-staging-local/app # PREREQ(REHYDRATION):  Change the server name to your environment's
            dockerImageTag: ${run_number}
          inputResources:
            - name: be_gitRepo
              trigger: false
          inputSteps:
            - name: bld_backend
            - name: publish_frontend
          integrations:
            - name: ARTFY_INT
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            # <-- PREREQ (REHYDRATE int_XX_url, int_XX_user and int_XX_apikey by replacing XX by the name of the Artifactory Integration) 
            - retry_command $jfrog_cli_path rt config --url $int_ARTFY_INT_url --user $int_ARTFY_INT_user --apikey $int_ARTFY_INT_apikey --interactive=false
            - pushd $res_be_gitRepo_resourcePath/SUV-204-CI-CD-Deep-Dive:JFrog-Pipelines/docker
            - $jfrog_cli_path rt dl npm-staging-virtual/frontend/-/frontend-3.0.0.tgz client.tgz --flat
            - $jfrog_cli_path rt dl libs-staging-virtual/com/jfrog/backend/1.0.0/backend-1.0.0.jar server.jar --flat
            - add_run_variables buildStepName=${step_name}
            - add_run_variables ${step_name}_buildNumber=${run_number}
            - add_run_variables ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_ARTFY_INT_url} .
            - $jfrog_cli_path rt bce $pipeline_name $run_number
            - $jfrog_cli_path rt docker-push $dockerImageName:$dockerImageTag docker-staging-local --build-name=$pipeline_name --build-number=$run_number
            - add_run_files /tmp/jfrog/. jfrog

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app
          outputResources:
            - name: appl_build_info

      - name: promote_app_build
        type: PromoteBuild
        configuration:
          targetRepository: docker-prod-virtual # <-- PREREQ: Create 2 docker repositories: docker-prod-local (LOCAL) and docker-prod-virtual which aggregates it and uses it as the default deployment repository
          integrations:
            - name: ARTFY_INT
          inputResources:
            - name: appl_build_info
          outputResources:
            - name: appl_promoted_build_info
